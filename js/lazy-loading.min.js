!function(){"use strict";const e="50px",t=.01,o="lazy-loading",n="lazy-loaded",s="lazy-error";function a(e){const t=e.dataset.src||e.src;if(!t)return;e.classList.add(o);const a=new Image;a.onload=function(){e.dataset.src&&(e.src=e.dataset.src,delete e.dataset.src),e.dataset.srcset&&(e.srcset=e.dataset.srcset,delete e.dataset.srcset),e.classList.remove(o),e.classList.add(n),e.dispatchEvent(new CustomEvent("lazyloaded",{bubbles:!0}))},a.onerror=function(){e.classList.remove(o),e.classList.add(s),console.error("Failed to load image:",t)},a.src=t}function r(){console.log("🚀 Initializing lazy loading..."),function(){const o=document.querySelectorAll('img[data-src], img[loading="lazy"]');if(0!==o.length)if("IntersectionObserver"in window){const n=new IntersectionObserver((e,t)=>{e.forEach(e=>{if(e.isIntersecting){const o=e.target;a(o),t.unobserve(o)}})},{rootMargin:e,threshold:t});o.forEach(e=>{n.observe(e)}),console.log(`✅ Lazy loading initialized for ${o.length} images`)}else o.forEach(e=>a(e)),console.log("⚠️ IntersectionObserver not supported, loaded all images immediately")}(),function(){const o=document.querySelectorAll("[data-bg]");if(0!==o.length)if("IntersectionObserver"in window){const s=new IntersectionObserver((e,t)=>{e.forEach(e=>{if(e.isIntersecting){const o=e.target,s=o.dataset.bg;s&&(o.style.backgroundImage=`url('${s}')`,o.classList.add(n),delete o.dataset.bg,t.unobserve(o))}})},{rootMargin:e,threshold:t});o.forEach(e=>s.observe(e)),console.log(`✅ Lazy loading initialized for ${o.length} background images`)}else o.forEach(e=>{const t=e.dataset.bg;t&&(e.style.backgroundImage=`url('${t}')`,delete e.dataset.bg)})}(),function(){const o=document.querySelectorAll("iframe[data-src]");if(0!==o.length&&"IntersectionObserver"in window){const s=new IntersectionObserver((e,t)=>{e.forEach(e=>{if(e.isIntersecting){const o=e.target;o.dataset.src&&(o.src=o.dataset.src,o.classList.add(n),delete o.dataset.src,t.unobserve(o))}})},{rootMargin:e,threshold:t});o.forEach(e=>s.observe(e)),console.log(`✅ Lazy loading initialized for ${o.length} iframes`)}}(),function(){const e=document.querySelectorAll("img:not([loading])");let t=0;e.forEach((e,o)=>{o>=3&&(e.setAttribute("loading","lazy"),t++)}),t>0&&console.log(`✅ Added native lazy loading to ${t} images`)}(),console.log("✅ Lazy loading initialization complete")}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",r):r(),window.LazyLoader={init:r,loadImage:a}}();